# -*- coding: utf-8 -*-
"""Davina Icasia_4522210101_Membersihkan Data_PDS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15XOU_nQnIqSCHKbKS3qUTDAv6ZGNkv6p
"""

import seaborn as sns
import matplotlib.pyplot as plt

import pandas as pd
import numpy as np

"""# Data Balaji Fast Food Sales"""

df = pd.read_csv("/content/Balaji Fast Food Sales.csv")
df.head()

"""## Dataset Attributes Information"""

df.info()

"""## Pemeriksaan Missing Values"""

# mengecek jumlah null tiap field
for i in df.columns:
  print(f"{i} null sum: {df[i].isnull().sum()}")

# menampilkan null values
df[df.isnull().any(axis=1)]

# Mengisi nilai null dengan modus
df['transaction_type'] = df['transaction_type'].fillna(df['transaction_type'].mode()[0])

df2 = df.copy()
print(df2.shape)
df2.head()

# mengecek jumlah null tiap field
for i in df2.columns:
  print(f"{i} null sum: {df2[i].isnull().sum()}")

df2.head()

"""## Deteksi Duplikasi"""

print(df2.duplicated().sum())

"""## Pemeriksaan Format dan Konsistensi"""

df.info()

# mengubah Dtype date dari object menjadi datetime64[ns]
df2['date'] = pd.to_datetime(df2['date'], format='mixed')

df2.info()

"""## Boxplot and IQR (Deteksi dan Penanganan Outliers)"""

df2.head()

plt.figure(figsize=(10,5))
box_plot = sns.boxplot(
    data=df2,
    y='transaction_amount',
    x='time_of_sale',
    hue='item_type',
    palette=['#afb4ad','#464b37']
)

plt.show()

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Buat salinan df
df_clean = df2.copy()

# Kolom yang ingin diperiksa untuk outlier
target_columns = ['item_price', 'quantity', 'transaction_amount']

# Inisialisasi mask (True untuk baris yang valid)
mask = pd.Series([True] * len(df2), index=df2.index)

for column in target_columns:
    # Visualisasi boxplot
    plt.figure(figsize=(6, 4))
    sns.boxplot(x=df2[column])
    plt.title(f"Box Plot untuk {column}")
    plt.show()

    # Hitung IQR dan batas outlier
    Q1 = df2[column].quantile(0.25)
    Q3 = df2[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # Deteksi outlier
    outliers = (df2[column] < lower_bound) | (df2[column] > upper_bound)
    print(f"Jumlah outlier dalam kolom '{column}': {outliers.sum()}")

    # Gabungkan mask untuk menyaring outlier
    mask &= ~outliers

# Hapus semua baris yang mengandung outlier di kolom target
df_clean = df2[mask]

# Simpan hasil bersih ke variabel df2
df2 = df_clean

print("Jumlah total baris setelah menghapus outlier:", len(df2))

df2.nunique()

"""## Scatterplot (Deteksi dan Penanganan Outliers)"""

plt.figure(figsize=(10,5))
sns.scatterplot(
    data=df2,
    x="quantity",
    y="transaction_amount",
    hue="item_type",
    style="item_type",
    palette=['#afb4ad','#464b37']
)

plt.show()

"""## Dataset Bersih"""

df2.head()

df2.to_csv("dataset_bersih.csv", index=False) # menyimpan ke csv
print("Dataset Bersih telah disimpan dalam 'dataset_bersih.csv'")